[
    {
        "title": "Testing Async React Server Components in a Next.js Project",
        "slug": "testing-async-react-server-components-with-next-js",
        "meta_description": "Learn how to test asynchronous React Server Components in your Next.js project. This guide covers common challenges, solutions using <Suspense>, and demonstrates how to make snapshot assertions work.",
        "content": "Testing async components in a Next.js project can be tricky, particularly when dealing with React Server Components. The challenge arises from the need to handle asynchronous data fetching and Suspense boundaries properly. \r\n\r\n### The Challenge\r\n\r\nReact Server Components allow you to fetch data on the server and send it to the client, enhancing performance by reducing the amount of JavaScript required on the client-side. However, this asynchrony introduces complexities in testing.\r\n\r\nHaving asynchronous components like this introduces some challenges when writing unit tests \r\n\r\n```ts\r\nexport type PageSearchParams = {\r\n\tquery?: string;\r\n\tpage?: string;\r\n  };\r\n  \r\n  export default async function Page({\r\n\tsearchParams,\r\n  }: {\r\n\tsearchParams?: PageSearchParams;\r\n  }) {\r\n\tconst query = searchParams?.query || \"\";\r\n\tconst currentPage = Number(searchParams?.page) || 1;\r\n\tconst asyncData = await fetchSomeDataAsynchronously(query, currentPage);\r\n  \r\n\treturn (\r\n\t\t<>Do something with {...asyncData}</>\r\n\t);\r\n  }\r\n```\r\n\r\nA common issue is that when testing async components, you might encounter empty snapshots. This is illustrated by the following example, which renders an async component but ends up with an empty snapshot:\r\n\r\n```javascript\r\ntest(\"This test will pass but it will generate an empty snapshot\", async () => {\r\n  const { container } = render(<Page />);\r\n  expect(container).toMatchSnapshot();\r\n});\r\n```\r\n\r\nThe generated snapshot might look like this:\r\n\r\n```javascript\r\nexports[`This test will pass but it will generate an empty snapshot 1`] = `<div />`;\r\n```\r\n\r\n\r\nIf we try to perform some `screen` assertions, the test will fail. For example:\r\n\r\n```ts\r\ntest(\"This test will fail because the string cannot be found\", async () => {\r\n  const { container } = render(<Page />);\r\n  await screen.findByText(\"Some text in your page\"); // can't be found\r\n});\r\n```\r\n\r\nPlease note that, depending on the version of Next.js you are using, you might encounter errors like this:\r\n\r\n```sh\r\nError: Objects are not valid as a React child (found: [object Promise]). If you meant to render a collection of children, use an array instead.\r\n```\r\n\r\nCheck the links at the end of the post to see which package versions should help avoid these errors.\r\n\r\n### The Solution: Using `<Suspense>` and `screen` \r\n\r\nTo solve this issue I discovered a workaround in [this GitHub issue](https://github.com/testing-library/react-testing-library/issues/1209#issuecomment-1569813305).\r\n\r\nThe workaround is to wrap your Component with `<Suspense>` to the render call. With that change the `screen` assert will pass.\r\n\r\n```ts\r\ntest(\"This will pass but will now pass\", async () => {\r\n\tconst { container } = render(\r\n\t\t<Suspense>\r\n\t\t\t<Page />\r\n\t\t</Suspense>,\r\n\t);\r\n\tawait screen.findByText(\"Some text in your page\");\r\n});\r\n```\r\n\r\nFrom the other side, if you are only interested in asserting the snapshot like this, the snapshot will still be empty.\r\n\r\n```ts\r\ntest(\"This will pass but will still generate an empty snapshot\", async () => {\r\n\tconst { container } = render(\r\n\t\t<Suspense>\r\n\t\t\t<Page />\r\n\t\t</Suspense>,\r\n\t);\r\n\texpect(container).toMatchSnapshot();\r\n});\r\n```\r\n\r\nI discovered that for some reason that I cannot understand, if you call first a `screen` assert the snapshot will finally generate a correct snapshot.\r\n\r\n```ts\r\ntest(\"This will pass and will now generate a correct snapshot\", async () => {\r\n\tconst { container } = render(\r\n\t\t<Suspense>\r\n\t\t\t<Page />\r\n\t\t</Suspense>,\r\n\t);\r\n\tawait screen.findByText(\"Some text in your page\");\r\n\texpect(container).toMatchSnapshot();\r\n});\r\n```\r\n\r\n\r\n### Conclusion\r\n\r\nAs far as I understand, the issues are caused by these features being quite new and still in development, and **it is possible that by the time you read this, the issue may already be resolved**.\r\n\r\nPlease note that my proposed solutions are more of a workaround and may rely on unstable package versions.\r\n\r\nIn any case, I hope this helps others successfully write unit tests for asynchronous server components âœ… ðŸš€.\r\n\r\nYou can check [the source code of this blog](https://github.com/abel-castro/abelcastro.dev-next/blob/main/tests/unit-tests/pages.test.tsx#L57) to see these workarounds in action within a real-world app, or review [this demo project](https://github.com/nickserv/rsc-testing) that showcases the problem with a simple app.\r\n\r\nHappy coding! Happy testing!",
        "date": "2024-08-13",
        "tags": [
            {
                "name": "TypeScript"
            },
            {
                "name": "Testing"
            },
            {
                "name": "Next.js"
            }
        ]
    },
    {
        "title": "Building Fasting Timer 18:6: A Learning Journey with React, Next.js, and More",
        "slug": "building-fasting-timer-for-learning-react-nextjs",
        "meta_description": "Discover the journey of building the Fasting Timer 18:6 app using React and Next.js. Learn about key concepts such as testing with Jest, creating a coverage badge with Codecov.io, and implementing a flexible storage solution.",
        "content": "![Fasting Timer 18:6](https://github.com/abel-castro/fasting-timer/blob/main/fasting-timer-screenshot.jpg?raw=true \"Fasting Timer 18:6\")\r\n\r\n\r\nIn my journey of learning more about React and Next.js, I created a new project: **Fasting Timer 18:6**. In this blog post, I'll take you through the details of the project, the key learnings, and some interesting technical aspects that might be helpful for fellow developers.\r\n\r\nYou can check out the project repository [here](https://github.com/abel-castro/fasting-timer) and try the live app [here](https://fasting-timer.vercel.app).\r\n\r\n### Project Overview\r\n\r\n**Fasting Timer 18:6** is a simple yet effective application designed to help users manage their intermittent fasting schedules. The 18:6 fasting method involves fasting for 18 hours and eating during a 6-hour window. This app helps users keep track of their fasting and eating times with ease.\r\n\r\n### Key Learnings\r\n\r\nWorking on this project provided me with several valuable learning opportunities:\r\n\r\n1. **Testing React Apps with Jest**\r\n   - Writing tests for React applications was one of the primary goals of this project. Using Jest, I was able to create a comprehensive test suite to ensure the app functions correctly. Testing not only helps in catching bugs early but also makes the codebase more maintainable.\r\n   - Here's a snippet of a simple test case:\r\n\r\n```javascript\r\n\timport { render, screen, fireEvent, act } from \"@testing-library/react\";\r\n\timport Home from \"../app/page\";\r\n\timport storageService from \"../app/storage/storage-service\";\r\n\t\r\n\tit(\"should start the timer and switch to fasting/eating mode after clicking the button\", async () => {\r\n    \tconst { container } = render(<Home />);\r\n    \t\r\n    \texpect(container).toMatchSnapshot();\r\n    \t\r\n    \t// Start fasting\r\n    \tconst button = screen.getByRole(\"button\", { name: /Start fasting/i });\r\n    \tawait act(async () => {\r\n    \t  fireEvent.click(button);\r\n    \t});\r\n    \t\r\n    \texpect(container).toMatchSnapshot();\r\n    \t\r\n    \tconst startFastingTime = storageService.getStartFastingTime();\r\n    \texpect(startFastingTime).toBeInstanceOf(Promise<Date>);\r\n    \t// ...\r\n\t});\r\n```\r\n\r\n2. **Creating a Coverage Badge with Codecov.io**\r\n   - Integrating Codecov.io allowed me to monitor test coverage. This step was crucial in ensuring that a significant portion of the code is tested, providing a clear picture of areas that might need more attention.\r\n   - The coverage badge is prominently displayed in the repository, serving as a quick reference for the project's test coverage status.\r\n\r\n### The StorageService Concept\r\n\r\nOne of the interesting aspects of the project is the **StorageService**. This service is designed to manage the storage and handling of fasting and non-fasting times. \r\n\r\n**Key Points:**\r\n- **BrowserStorage as Default Provider**: Currently, the default storage provider is `BrowserStorage`, which stores data in the user's local browser storage.\r\n- **IStorageProvider Interface**: To make the storage service flexible, an `IStorageProvider` interface is defined. This interface outlines the necessary methods that any storage provider must implement.\r\n- **Ease of Changing Persistence Layer**: With this setup, changing the persistence layer (e.g., from local storage to a database) becomes straightforward. One only needs to implement the `IStorageProvider` interface and update the storage service configuration.\r\n\r\n**Example Implementation:**\r\n```javascript\r\nconst storageService = new StorageService(new BrowserStorageProvider());\r\n\r\nexport default storageService;\r\n```\r\nWith this design, changing the persistence layer is as simple as touching two filesâ€”implementing the new storage provider and updating the configuration.\r\n\r\n### Conclusion\r\n\r\nWorking on the **Fasting Timer 18:6** project has been an enriching experience. From learning to write tests with Jest to creating a flexible storage solution, each step has contributed to my growth as a developer. I hope this blog post provides valuable insights and encourages you to explore and implement these concepts in your projects.\r\n\r\nFeel free to check out the repository, try the app, and provide any feedback or contributions. Happy coding!\r\n\r\nTry the live app [here](https://fasting-timer.vercel.app).",
        "date": "2024-07-26",
        "tags": [
            {
                "name": "TypeScript"
            },
            {
                "name": "Testing"
            },
            {
                "name": "Tailwind"
            },
            {
                "name": "Next.js"
            }
        ]
    },
    {
        "title": "My blog goes Next.js",
        "slug": "my-blog-goes-next-js",
        "meta_description": "Explore the evolution of my blog as it embraces Next.js, a journey through technology and design enhancements aimed at enhancing user experience and performance.",
        "content": "The primary goal of my blog has always been to experiment and explore new technologies rather than getting more views. This journey has seen my blog evolve through various technologies and frameworks, each iteration bringing its own set of learnings and advancements. Hereâ€™s a look back at the history and the latest re-implementation of my blog.\r\n\r\n## The Initial Version: Django, Django Templates, and Bootstrap\r\n\r\nThe initial version of my blog was launched in 2021. At that time, I chose [Django](https://www.djangoproject.com) as the primary framework for its robustness and extensive feature set. Django templates allowed for server-side rendering, while Bootstrap provided a responsive and modern look to the blog. This combination was powerful and relatively easy to work with, making it a perfect choice for someone looking to build a solid foundation.\r\n\r\n## Evolving with htmx and REST API\r\n\r\nAs time went on, I began exploring more dynamic ways to enhance the user experience. This led to the incorporation of [htmx](https://blog.abelcastro.dev/django-and-htmx), which allowed for more interactive web pages without the need for full page reloads. Additionally, I implemented a REST API, which opened up possibilities for future integrations and provided a more modular approach to data handling. This version of the blog, which has seen significant evolution, is still live and can be found at [https://abelcastro.dev/blog](https://abelcastro.dev/blog).\r\n\r\n## Experimenting with Angular\r\n\r\nIn parallel, I also [experimented with Angular](https://blog.abelcastro.dev/learning-angular-adding-to-my-blog), a powerful framework for building dynamic web applications. This version, although not always functional, was hosted separately at [https://ng.abelcastro.dev](https://ng.abelcastro.dev). This experiment allowed me to understand the intricacies of a component-based architecture and single-page applications, providing valuable insights into modern web development practices.\r\n\r\n## The Latest Iteration: Next.js, Tailwind, and Vercel\r\n\r\nThe latest iteration of my blog is available at [https://blog.abelcastro.dev](https://blog.abelcastro.dev). **This will be the default version of my blog on which I will focus in the future**. It represents a significant leap forward in terms of technology and developer experience. Developed with [Next.js](https://nextjs.org) and styled with [Tailwind CSS](https://tailwindcss.com), this version is sleek, fast, and highly responsive. Next.js offers a perfect balance between server-side rendering and static site generation, ensuring optimal performance and SEO benefits. Tailwind CSS, with its utility-first approach, makes it easy to create a custom and consistent design system.\r\n\r\nHosting this new version on Vercelâ€™s platform as a hobby project has been a delightful experience. After being used to handling server configurations and Docker files, it was amazing to simply link my GitHub repository with Vercel and have the code deployed seamlessly.\r\n\r\nOne of the exciting aspects of this re-implementation was the opportunity to apply techniques I learned from the [Next.js dashboard tutorial](https://nextjs.org/learn/dashboard-app). Features like pagination and search have been integrated, enhancing the functionality and usability of the blog. These features not only improve the user experience but also showcase the powerful capabilities of Next.js and the ease with which complex features can be implemented.\r\n\r\n## Conclusion\r\n\r\nThe evolution of the code and posts on my blog reflects part of my journey as a developer. I am very happy with the results and excited to learn more about TypeScript and frameworks like Next.js.\r\n\r\nBy the way, all these projects are available in my github profile.",
        "date": "2024-07-12",
        "tags": [
            {
                "name": "TypeScript"
            },
            {
                "name": "Tailwind"
            },
            {
                "name": "Next.js"
            }
        ]
    },
    {
        "title": "My first post",
        "slug": "my-first-post",
        "meta_description": "This blog is built with Django because I thought that if I'm going to write about Django and Python it makes sense that this blog is made with them.",
        "content": "Hi Internet! Welcome to my blog. I will write about topics mostly related to Python and in special to Django.\r\n\r\nThis blog is also built with Django because I thought that if I'm going to write about Django and Python it makes sense that this blog is made with them.\r\n\r\nYou can find the source code in [my GitHub](https://github.com/abel-castro/abelcastro.dev).\r\n\r\nIt is a simple Django project with a Markdown editor for writing posts in the Django admin. For my me and this blog is exactly what I need but if you are looking for a CMS you should take a look to [Wagtail](http://wagtail.io).\r\n\r\n\r\nFeatures of my blog project:\r\n- Django + Postgres + Nginx\r\n- Markdown support powered by [Martor](https://github.com/agusmakmun/django-markdown-editor)\r\n- Dockerized development and production setups\r\n- HTTPS for production\r\n\r\nNote that the production environment is going to serve the media and static files with Nginx. I took the decision to have this \"all-in-one setup\" because I am not expecting to have a lot of traffic here. Please consider to use a cloud storage service if you are expecting more visitors in your website.",
        "date": "2021-03-25",
        "tags": []
    }
]
